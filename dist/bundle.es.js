function e(e){return new Promise(((t,n)=>{const r=new FileReader;r.addEventListener("load",(()=>{t(r)})),r.addEventListener("error",(e=>{n(e)})),r.readAsDataURL(e)}))}var t={toDataURL:e,toImage:function(t,{width:n,height:r}){return new Promise(((a,o)=>{const i=new Image(n,r),s=webkitURL||s,d=s?s.createObjectURL(t):e(t);i.src=d,i.addEventListener("load",(()=>{a(i),s&&s.revokeObjectURL(d)})),i.addEventListener("error",(e=>o(e)))}))},fromDataURL:function(e,t){return new Promise(((n,r)=>{try{const r=e.split(",")[1],o=/^data:(.*?)(;base64)?,/,i=e.match(o)[1],s=atob(r),d=s.length,c=new Uint8Array(d);for(var a=0;a<d;a++)c[a]=s.charCodeAt(a);n(new Blob([c],{type:t||i}))}catch(e){r(e)}}))},fromCanvas:function(e,{type:t="image/jpeg",quality:n=.8}){return new Promise((r=>{e.toBlob(r,t,n)}))}};var n={fromURL:function(e){return new Promise(((t,n)=>{const r=new Image;r.addEventListener("load",(()=>{t(r)})),r.addEventListener("error",(e=>n(e))),r.src=e,r.setAttribute("crossOrigin","anonymous")}))},fromDataURL:function(e){return new Promise(((t,n)=>{const r=new Image;r.addEventListener("load",(()=>{t(r)})),r.addEventListener("error",(e=>n(e))),r.src=e}))},toCanvas:function(e){return new Promise((t=>{const n=document.createElement("canvas"),r=n.getContext("2d");n.width=e.naturalWidth,n.height=e.naturalHeight,r.drawImage(e,0,0,n.width,n.height),t(n)}))}};var r={toDataURL:function(e,t=.8,n="image/jpeg"){return new Promise((r=>{r(e.toDataURL(n,t))}))}};export{t as Blob,r as Canvas,n as Image};
